# если мы изменяем уже существующую переменную (a = a + x), интерпретатор ВСЕГДА будет думать, что она локальная
# global и nonlocal нужны только при изменении значения переменной

# Переменные внутри функций создаются, только при ВЫЗОВЕ ФУНКЦИИ, когда мы написали функцию,
# это не значит, что переменные уже создались, они создадутся, только когда функцию вызовут

# global может создать переменную (в глобальном скоупе, находясь внутри функции)
# nonlocal не может создать переменную

# интересное исключение, если написать global на переменную в функции внутри функции,
# то интерпретатор пропустит поиск в enclosed и пойдёт искать переменную сразу в global скоупе

# nonlocal ищет только во внешних скоупах, но не в глобальном

# интересное исключение, если написать nonlocal на переменную в функции внутри функции,
# то интерпретатор пропустит поиск в global скоупе, и пойдёт искать переменную сразу в enclosed,
# он не будет искать в global даже если не найдёт переменную в enclosed

# не используйте global,
# альтернатива это перезапись переменной через вызов функции и передачи этой переменной в аргумент функции для её изменения

counter = 100
test = 5


def increment():
    global test

    counter = 22

    def inner():
        nonlocal counter
        counter += 1
        print(counter)

    inner()


def test_func():
    global test
    test += 1
    print(test)


if __name__ == '__main__':
    increment()
    test_func()
