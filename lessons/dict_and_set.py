# dict - словарь, отображение, хеш-мап, ассоциативный массив, коллекция пар ключ-значение,
# где ключом может быть только hashable тип, доступ по ключу и проверка наличия ключа O(1),
# с питона 3.7 хранит порядок вставки

# пустой словарь создавать лучше через {}, а не dict(), под капотом сразу будет создана 8 элементов

# set - множество, хэшсет, неупорядоченный набор hashable объектов, доступ и проверка наличия O(1)
# frozenset(хэшируемый) - неизменяемый брат множества

# Хэш - некий набор символов, который получается при преобразовании данных по специальной формуле
# Коллизия - это когда два элемента имеют один и тот же хэш
# hashable типы данных, это данные, которые неизменяемые на протяжении всей жизни программы(НО Hashable != Immutable)
# Получаем хэш -> высчитываем позицию в массиве -> если элемента нет, то действуем соответственно задаче ->
# если элемент есть, то сравниваем ключ == тому что ищем -> если ключ не равен искомому, то ищем дополнительный бакет
# В dict и set можно положить например tuple, если все его элементы хэшируемые!
# В set и dict нельзя положить set и dict, потому что они не хэшируемые!

# По умолчанию самописные классы возвращают хэш основанный на id, если переопределяете хэш, то всегда проверяйте,
# что у равных объектов одинаковый хэш
# Что можно положить в сет/словарь и проверка на содержимое

from terminaltables import AsciiTable
from pympler import asizeof
from timeit import timeit
import dis

print('-------------------------Проверка скорости создания  через dict() и через {}----------------------------')
print(timeit('dict()'))
print(timeit('{}'))
print('-------------------------Байт код создания dict() и {}----------------------------')
print('-------------------------dict()----------------------------')
print(dis.dis('dict()'))
print('-------------------------{}----------------------------')
print(dis.dis('{}'))

print('---------Пример того, что в словаре ключ значения упорядочены, а в сете нет------------------------')
a_dict = dict(x=1, y=2, z=3)
a_set = set('xyz')
print(a_dict)
print(a_set)

print('----------------------Сравнение скорости поиска элемента--------------------------')
b_list = list(range(10_000))
b_set = set(b_list)
b_dict = {e: None for e in b_list}
in_list = timeit('5_000 in b_list', 'from __main__ import b_list', number=100)
in_set = timeit('5_000 in b_set', 'from __main__ import b_set', number=100)
in_dict = timeit('5_000 in b_dict', 'from __main__ import b_dict', number=100)
print(f'{in_list:.6f}')
print(f'{in_set:.6f}')
print(f'{in_dict:.6f}')

print('------------------------------------Абстрактный пример хэш таблицы--------------------------------------')
a_list = [['        '] * 8]
print(AsciiTable(a_list).table)
a_list[0][3]='("a", 1)'
a_list[0][0]='("A", 1)'
a_list[0][7]='("b", 1)'
print(AsciiTable(a_list).table)

